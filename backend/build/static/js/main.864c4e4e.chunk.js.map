{"version":3,"sources":["components/Header.js","components/Footer.js","services/socket.js","components/Deck.js","components/Opponent.js","components/Card.js","components/Hand.js","components/Player.js","components/Game.js","App.js","index.js"],"names":["Header","socket","io","play","data","console","log","card","color","value","id","emit","draw","uno","sendName","name","on","Deck","style","borderStyle","borderRadius","height","width","margin","justifyContent","alignItems","Opponent","opponent","hand","length","Card","validateCard","cardStyle","className","onClick","Hand","cards","colSpan","map","c","key","indexOf","Player","props","player","cardOnTop","currTurn","myTurn","playCard","alert","Game","useState","opponents","winner","setProps","socketService","playerData","join","find","p","topCard","filter","currPlayer","cardOnTopStyle","fontSize","border","o","App","Footer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.864c4e4e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <center><h1>UNO.io</h1></center>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Header = () => {\n    return (\n        <center><h3>Bean Bwill</h3></center>\n    )\n}\n\nexport default Header","import Game from './../components/Game';\nimport io from 'socket.io-client';\n  \nconst socket = io('http://localhost:3000');\n\nconst play = (data) => {\n  console.log(\n    `sending ${data.card.color}${data.card.value} as player id ${data.id}`\n  );\n  socket.emit('play', data);\n};\n\nconst draw = (data) => {\n  console.log(`drawing a card as id ${data.id}`);\n  socket.emit(\"draw\", data);\n};\n\nconst sendName = (data) => {\n  console.log(`sending name ${data.name} to server`);\n  socket.emit('giveName', data);\n  socket.on(\"giveID\", (data) => {\n    return data.id\n  });\n};\n\nconst uno = (data) => {\n  console.log(`sending uno signal to server from id ${data.id}`);\n  socket.emit('uno', data);\n};\n\nexport default { play, draw, uno, sendName, socket };\n","import React from 'react';\nimport './../App';\n\nconst Deck = () => {\n  const deckStyle = {\n    color: 'black',\n    borderStyle: 'solid',\n    borderRadius: 1,\n    height: 100,\n    width: 80,\n    margin: 3,\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n  return (\n    <div style={deckStyle} id='deck'>\n      Deck\n    </div>\n  );\n};\n\nexport default Deck;\n","import React from 'react';\n\nconst Opponent = ({ opponent }) => {\n  return (\n    <div>\n      <p>Op: {opponent.id}</p>\n      <p>Cards: {opponent.hand.length}</p>\n    </div>\n  );\n};\n\nexport default Opponent;\n","import React from 'react';\n\nconst Card = ({ card, validateCard }) => {\n  // console.log(`color: ${card.color}`);\n  const cardStyle = {\n    color: card.color,\n  };\n  return (\n    <td\n      style={cardStyle}\n      className={'playerCard'}\n      onClick={() => validateCard(card)}>\n      {card.value}\n    </td>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport './../App.css';\n\nconst Hand = ({ cards, validateCard }) => {\n  const genID = () => {\n    return Math.random * 1000000;\n  };\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan={cards.length}>Cards in hand: {cards.length}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {cards.map((c) => (\n            <Card\n              key={cards.indexOf(c)}\n              card={c}\n              validateCard={validateCard}\n            />\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Hand;\n","import React from 'react';\nimport Hand from './Hand';\n\nconst Player = (props) => {\n  const player = props.player;\n  const cardOnTop = props.cardOnTop;\n  const currTurn = props.currTurn;\n  const myTurn = player.id === currTurn;\n\n  const validateCard = (card) => {\n    if (myTurn) {\n      if (card.color === cardOnTop.color || card.value === cardOnTop.value) {\n        props.playCard(card);\n      } else {\n        alert(`Play a valid card.`);\n      }\n    } else {\n      if (card.color === cardOnTop.color && card.value === cardOnTop.value) {\n        props.playCard(card);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <p>{myTurn ? 'Your Turn' : `Player ${currTurn}'s turn`}</p>\n      <Hand cards={player.hand} validateCard={validateCard} />\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState } from 'react';\nimport './../App.css';\nimport socketService from './../services/socket.js';\nimport Deck from './Deck';\nimport Opponent from './Opponent';\nimport Player from './Player';\n\nconst Game = () => {\n  const [props, setProps] = useState({\n    id: null,\n    hand: [],\n    cardOnTop: [],\n    opponents: [],\n    currTurn: [],\n    winner: [],\n  });\n\n  const { id, hand, cardOnTop, opponents, currTurn, winner } = props;\n\n  const draw = () => {\n    console.log(`calling draw`);\n    socketService.draw({ id: id });\n  };\n\n  const playCard = (card) => {\n    socketService.play({ id: id, card: card });\n  };\n\n  if (id) {\n    socketService.socket.on('fetch', (data) => {\n      console.log(`receiving data as player id ${id}`);\n      console.log(`player data: ${data.playerData.join()}`);\n      console.log('hand: ' + data.playerData.find((p) => p.id === id).hand);\n      // setWinner(data.winner);\n      // console.log(`rendering hand`)\n      // setCardOnTop(data.topCard);\n      // console.log(`rendering hand`)\n      // setCurrTurn(data.currPlayer);\n      // console.log(`rendering hand`)\n      // setHand(data.playerData.find((p) => p.id === id).hand);\n      // console.log(`rendering hand`)\n      // setOpponents(data.playerData.filter((p) => p.id !== id));\n      // console.log(`rendering hand`)\n\n      setProps({\n        ...props,\n        hand: data.playerData.find((p) => p.id === id).hand,\n        cardOnTop: data.topCard,\n        opponents: data.playerData.filter((p) => p.id !== id),\n        currTurn: data.currPlayer,\n        winner: data.winner,\n      });\n    });\n  }\n\n  socketService.socket.on('giveID', (data) => {\n    setProps({ ...props, id: data.id });\n  });\n\n  const cardOnTopStyle = {\n    fontSize: 'xx-large',\n    color: cardOnTop.color,\n    height: 100,\n    width: 80,\n    border: 'solid',\n    borderRadius: 1,\n    margin: 3,\n    alignItems: 'center',\n  };\n\n  if (!winner) {\n    return (\n      //players in circle\n      //deck in middle/ uno button\n      <div>\n        <center>\n          <table>\n            <tbody>\n              <tr>\n                {opponents.map((o) => (\n                  <td key={o.id} className='opponent'>\n                    <Opponent opponent={o} />\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n          <Deck />\n          <div style={cardOnTopStyle}>{`${cardOnTop.value}`}</div>\n          <button onClick={() => draw()}>Draw</button>\n          <Player\n            player={{ hand: hand, id: id }}\n            cardOnTop={cardOnTop}\n            currTurn={currTurn}\n            playCard={playCard}\n          />\n        </center>\n      </div>\n      //player's deck with navigation buttons\n    );\n  } else {\n    return <h1>Game Over Boiz!</h1>;\n  }\n};\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Game from './components/Game';\nimport socketService from './services/socket.js';\n\nlet name = 'benis'\nlet id = socketService.sendName({ name });\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Game name={name} id={id}/>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}