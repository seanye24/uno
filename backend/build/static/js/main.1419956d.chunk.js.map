{"version":3,"sources":["components/Header.js","components/Footer.js","services/socket.js","components/Deck.js","components/Opponent.js","components/Card.js","components/Hand.js","components/Player.js","components/Game.js","App.js","index.js"],"names":["Header","socket","io","play","data","console","log","card","color","value","id","emit","draw","uno","sendName","name","Deck","Opponent","opponent","hand","length","Card","validateCard","onClick","Hand","cards","colSpan","map","c","key","className","Player","props","player","cardOnTop","currTurn","playCard","alert","Game","useState","setId","setHand","setCardOnTop","opponents","setOpponents","setCurrTurn","winner","setWinner","socketService","on","playerData","join","find","p","topCard","currPlayer","filter","o","App","Footer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1419956d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <center><h1>UNO.io</h1></center>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Header = () => {\n    return (\n        <center><h3>Bean Bwill</h3></center>\n    )\n}\n\nexport default Header","import Game from './../components/Game';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3000');\n\nconst play = (data) => {\n  console.log(\n    `sending ${data.card.color}${data.card.value} as player id ${data.id}`\n  );\n  socket.emit('play', data);\n};\n\nconst draw = (data) => {\n  console.log(`drawing a card as id ${data.id}`);\n  socket.emit('draw', data);\n};\n\nconst sendName = (data) => {\n  console.log(`sending name ${data.name} to server`);\n  socket.emit('giveName', data);\n};\n\nconst uno = (data) => {\n  console.log(`sending uno signal to server from id ${data.id}`);\n  socket.emit('uno', data);\n};\n\nexport default { play, draw, uno, sendName, socket };\n","import React from 'react';\nimport './../App';\n\nconst Deck = () => {\n  return <div id='deck'>Deck</div>;\n};\n\nexport default Deck;\n","import React from 'react';\n\nconst Opponent = ({ opponent }) => {\n  return (\n    <div>\n      <p>Op: {opponent.id}</p>\n      <p>Cards: {opponent.hand.length}</p>\n    </div>\n  );\n};\n\nexport default Opponent;\n","import React from 'react';\n\nconst Card = ({ card, validateCard }) => {\n  console.log(`color: ${card.color}`);\n  return (\n    <button onClick={() => validateCard(card)}>\n      {card.color}\n      {card.value}\n    </button>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\nimport './../App.css'\n\nconst Hand = ({ cards, validateCard }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th colSpan={cards.length}>Cards in hand: {cards.length}</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          {cards.map((c) => (\n            <td key={`${c.color}${c.value}`} className='playerCard'>\n              <Card\n                card={c}\n                validateCard={validateCard}\n              />\n            </td>\n          ))}\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Hand;\n","import React from 'react';\nimport Hand from './Hand';\n\nconst Player = (props) => {\n  const player = props.player;\n  const cardOnTop = props.cardOnTop;\n  const currTurn = props.currTurn;\n  const myTurn = player.id === currTurn;\n\n  const validateCard = (card) => {\n    if (card.color === cardOnTop.color || card.value === cardOnTop.value) {\n      props.playCard(card);\n    } else {\n      alert(`Play a valid card.`);\n    }\n  };\n\n  return (\n    <div>\n      <Hand cards={player.hand} validateCard={validateCard} />\n    </div>\n  );\n};\n\nexport default Player;\n","import React, { useState } from 'react';\nimport './../App.css';\nimport socketService from './../services/socket.js';\nimport Deck from './Deck';\nimport Opponent from './Opponent';\nimport Player from './Player';\n\nconst Game = () => {\n  const [id, setId] = useState(null);\n  const [hand, setHand] = useState([]);\n  const [cardOnTop, setCardOnTop] = useState([]);\n  const [opponents, setOpponents] = useState([]);\n  const [currTurn, setCurrTurn] = useState(null);\n  const [winner, setWinner] = useState(null);\n  // setId(5)\n  // console.log(id)\n\n  const draw = () => {\n    console.log(`calling draw`);\n    socketService.draw({ id: id });\n  };\n\n  const playCard = (card) => {\n    socketService.play({ id: id, card: card });\n  };\n\n  if (id) {\n    socketService.socket.on('fetch', (data) => {\n      console.log(`receiving data as player id ${id}`);\n      console.log(`player data: ${data.playerData.join()}`);\n      console.log('hand: ' + data.playerData.find((p) => p.id === id).hand);\n      setWinner(data.winner);\n      console.log(`rendering hand`)\n      setCardOnTop(data.topCard);\n      console.log(`rendering hand`)\n      setCurrTurn(data.currPlayer);\n      console.log(`rendering hand`)\n      setHand(data.playerData.find((p) => p.id === id).hand);\n      console.log(`rendering hand`)\n      setOpponents(data.playerData.filter((p) => p.id !== id));\n      console.log(`rendering hand`)\n    });\n  }\n\n  socketService.socket.on('giveID', (data) => {\n    console.log(`receiving id ${data.id} from server`);\n    setId(data.id);\n  });\n\n  if (!winner) {\n    return (\n      //players in circle\n      //deck in middle/ uno button\n      <div>\n        <center>\n          <table>\n            <tbody>\n              <tr>\n                {opponents.map((o) => (\n                  <td key={o.id} className='opponent'>\n                    <Opponent opponent={o} />\n                  </td>\n                ))}\n              </tr>\n            </tbody>\n          </table>\n          <Deck />\n          <p>Top Card: {`${cardOnTop.color}${cardOnTop.value}`}</p>\n          <button onClick={() => draw()}>Draw</button>\n          <Player\n            player={{ hand: hand, id: id }}\n            cardOnTop={cardOnTop}\n            currTurn={currTurn}\n            playCard={playCard}\n          />\n        </center>\n      </div>\n      //player's deck with navigation buttons\n    );\n  } else {\n    return <h1>Game Over Boiz!</h1>;\n  }\n};\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Game from './components/Game';\nimport socketService from './services/socket.js';\n\nsocketService.sendName({ name: 'benis is my name' });\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Game />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}